{
  "openapi": "3.0.1",
  "info": {
    "title": "Accounts API",
    "description": "API for accounts functions",
    "version": "v1"
  },
  "servers": [
    {
      "url": "/exec.bank"
    }
  ],
  "paths": {
    "/api/v1/Accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Lists the accounts.",
        "parameters": [
          {
            "name": "customerId",
            "in": "header",
            "description": "The `customerId` of the customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult.Account.v1"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult.Account.v1"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult.Account.v1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/api/v1/Accounts/{accountId}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Reads an account",
        "parameters": [
          {
            "name": "customerId",
            "in": "header",
            "description": "The `customerId` of the customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "The `accountId` of the account. The account must be one owned by the customer, or an account the customer has been granted access to. An account's `accountId` can be retrieved with the list or read operation on this service.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ItemResult.Account.v1"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemResult.Account.v1"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemResult.Account.v1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account.v1": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "accountNumber": {
            "type": "string",
            "nullable": true
          },
          "ownerCustomerId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "accountType": {
            "type": "string",
            "nullable": true
          },
          "available": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "balance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "creditLimit": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorType.": {
        "enum": [
          "System",
          "Input",
          "State",
          "ServiceUnavailable",
          "CustomHttpStatus",
          "NotFound"
        ],
        "type": "string"
      },
      "ListResult.Account.v1": {
        "type": "object",
        "properties": {
          "availableItems": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account.v1"
            },
            "nullable": true
          },
          "errorType": {
            "$ref": "#/components/schemas/ErrorType."
          },
          "isError": {
            "type": "boolean"
          },
          "errorCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "traceId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ItemResult.Account.v1": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/Account.v1"
          },
          "errorType": {
            "$ref": "#/components/schemas/ErrorType."
          },
          "isError": {
            "type": "boolean"
          },
          "errorCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "traceId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}